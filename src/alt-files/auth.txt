const loginReducer = (prevState, action) => {
    switch (action.type) {
      case 'RETRIEVE_TOKEN':
        return {
          ...prevState,
          userToken: action.token,
          isLoading: false,
        }
      case 'LOGIN':
        return {
          ...prevState,
          userName: action.id,
          userToken: action.token,
          isLoading: false,
        }
      case 'LOGOUT':
        return {
          ...prevState,
          userName: null,
          userToken: null,
          isLoading: false,
        }
      case 'REGISTER':
        return {
          ...prevState,
          userName: action.id,
          userToken: action.token,
          isLoading: false,
        }
    }
  }

  const [loginState, dispatch] = React.useReducer(
    loginReducer,
    initialLoginState
  )
  const authContext = React.useMemo(
    () => ({
      signIn: async (foundUser) => {
        console.log('foundUser = ' + foundUser)
        const userToken = String(foundUser.userToken)
        const userName = foundUser.username

        try {
          await SecureStore.setItemAsync('userToken', userToken)
        } catch (error) {
          console.log(error)
        }
        dispatch({ type: 'LOGIN', id: userName, token: userToken })
      },

      signOut: async () => {
        try {
          await SecureStore.deleteItemAsync('userToken')
        } catch (error) {
          console.log(error)
        }
        dispatch({ type: 'LOGOUT' })
      },
      signUp: async () => {
        try {
          await SecureStore.setItemAsync('userToken', userToken)
        } catch (error) {
          console.log(error)
        }
      },
    }),
    []
  )